;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name clojure.test.check.clojure-test, :imports nil, :requires {ct cljs.test, cljs.test cljs.test}, :uses nil, :defs {report-trial {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 107, :column 7, :end-line 107, :end-column 19, :arglists (quote ([property-fun so-far num-tests]))}, :name clojure.test.check.clojure-test/report-trial, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :end-column 19, :method-params ([property-fun so-far num-tests]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 3, :fn-var true, :arglists (quote ([property-fun so-far num-tests]))}, *default-test-count* {:name clojure.test.check.clojure-test/*default-test-count*, :file "resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 21, :column 1, :end-line 21, :end-column 36, :dynamic true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 21, :column 16, :end-line 21, :end-column 36, :dynamic true}}, *report-shrinking* {:name clojure.test.check.clojure-test/*report-shrinking*, :file "resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 52, :column 1, :end-line 52, :end-column 34, :dynamic true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 52, :column 16, :end-line 52, :end-column 34, :dynamic true}, :doc "If true, a verbose report of the property being tested, the\n  failing return value, and the arguments provoking that failure is emitted\n  prior to the start of the shrinking search."}, *report-trials* {:name clojure.test.check.clojure-test/*report-trials*, :file "resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 34, :column 1, :end-line 34, :end-column 31, :dynamic true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 34, :column 16, :end-line 34, :end-column 31, :dynamic true}, :doc "Controls whether property trials should be reported via clojure.test/report.\n  Valid values include:\n\n  * false - no reporting of trials (default)\n  * a function - will be passed a clojure.test/report-style map containing\n  :clojure.test.check/property and :clojure.test.check/trial slots\n  * true - provides quickcheck-style trial reporting (dots) via\n  `trial-report-dots`\n\n  (Note that all reporting requires running `quick-check` within the scope of a\n  clojure.test run (via `test-ns`, `test-all-vars`, etc.)\n\n  Reporting functions offered by clojure.test.check include `trial-report-dots` and\n  `trial-report-periodic` (which prints more verbose trial progress information\n  every `*trial-report-period*` milliseconds."}, trial-report-dots {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 85, :column 7, :end-line 85, :end-column 24, :arglists (quote ([{[so-far total] :clojure.test.check.clojure-test/trial}])), :doc "Intended to be bound as the value of `*report-trials*`; will emit a single\n  dot every 1000 trials reported."}, :name clojure.test.check.clojure-test/trial-report-dots, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :end-column 24, :method-params ([p__29348]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[so-far total] :clojure.test.check.clojure-test/trial}])), :doc "Intended to be bound as the value of `*report-trials*`; will emit a single\n  dot every 1000 trials reported."}, assert-check {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 14, :column 8, :end-line 14, :end-column 20, :private true, :arglists (quote ([{:keys [result], :as m}]))}, :private true, :name clojure.test.check.clojure-test/assert-check, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :end-column 20, :method-params ([p__29335]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [result], :as m}]))}, trial-report-periodic {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 73, :column 7, :end-line 73, :end-column 28, :arglists (quote ([m])), :doc "Intended to be bound as the value of `*report-trials*`; will emit a verbose\n  status every `*trial-report-period*` milliseconds, like this one:\n\n  Passing trial 3286 / 5000 for (your-test-var-name-here) (:)"}, :name clojure.test.check.clojure-test/trial-report-periodic, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :end-column 28, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Intended to be bound as the value of `*report-trials*`; will emit a verbose\n  status every `*trial-report-period*` milliseconds, like this one:\n\n  Passing trial 3286 / 5000 for (your-test-var-name-here) (:)"}, get-property-name {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 69, :column 8, :end-line 69, :end-column 25, :private true, :arglists (quote ([{property-fun :clojure.test.check.clojure-test/property, :as report-map}]))}, :private true, :name clojure.test.check.clojure-test/get-property-name, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :end-column 25, :method-params ([p__29343]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{property-fun :clojure.test.check.clojure-test/property, :as report-map}]))}, *trial-report-period* {:name clojure.test.check.clojure-test/*trial-report-period*, :file "resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 58, :column 1, :end-line 58, :end-column 37, :dynamic true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 58, :column 16, :end-line 58, :end-column 37, :dynamic true}, :doc "Milliseconds between reports emitted by `trial-report-periodic`."}, process-options {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 23, :column 7, :end-line 23, :end-column 22, :arglists (quote ([options])), :no-doc true}, :name clojure.test.check.clojure-test/process-options, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :end-column 22, :method-params ([options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([options]))}, last-trial-report {:name clojure.test.check.clojure-test/last-trial-report, :file "resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 62, :column 1, :end-line 62, :end-column 33, :private true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 62, :column 16, :end-line 62, :end-column 33, :private true}}, report-failure {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :line 113, :column 7, :end-line 113, :end-column 21, :arglists (quote ([property-fun result trial-number failing-params]))}, :name clojure.test.check.clojure-test/report-failure, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\clojure_test.cljs", :end-column 21, :method-params ([property-fun result trial-number failing-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 4, :fn-var true, :arglists (quote ([property-fun result trial-number failing-params]))}}, :require-macros {clojure.test.check.clojure-test clojure.test.check.clojure-test, ct cljs.test, cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{:clojure.test.check.clojure-test/params :clojure.test.check.clojure-test/trial :begin-test-var :else :name :num-tests :type :bad-options :fail :result :clojure.test.check.clojure-test/property :expected :cljs.test/default :clojure.test.check.clojure-test/shrinking :error :pass result :actual :message}, :order [:result :type :expected :actual :message :error result :pass :fail :num-tests :else :bad-options :cljs.test/default :begin-test-var :clojure.test.check.clojure-test/property :name :clojure.test.check.clojure-test/trial :clojure.test.check.clojure-test/shrinking :clojure.test.check.clojure-test/params]}, :doc nil}