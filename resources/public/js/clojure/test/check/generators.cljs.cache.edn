;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{namespace boolean map char shuffle int symbol vector not-empty list keyword hash-map byte sequence bytes}, :name clojure.test.check.generators, :imports {PseudoRandom goog.testing.PseudoRandom}, :requires {gstring goog.string, rose clojure.test.check.rose-tree, clojure.test.check.rose-tree clojure.test.check.rose-tree, goog.string goog.string, cljs.core cljs.core, clojure.test.check.random clojure.test.check.random, PseudoRandom goog.testing.PseudoRandom, clojure.string clojure.string, random clojure.test.check.random, core cljs.core}, :uses nil, :defs {gen-fmap {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 49, :column 7, :end-line 49, :end-column 15, :arglists (quote ([k {h :gen}])), :no-doc true}, :name clojure.test.check.generators/gen-fmap, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 15, :method-params ([k p__28904]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k {h :gen}]))}, one-of {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 224, :column 7, :end-line 224, :end-column 13, :arglists (quote ([generators])), :doc "Create a generator that randomly chooses a value from the list of\n  provided generators. Shrinks toward choosing an earlier generator,\n  as well as shrinking the value generated by the chosen generator.\n\n  Examples:\n\n      (one-of [gen/int gen/boolean (gen/vector gen/int)])\n\n  "}, :name clojure.test.check.generators/one-of, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 13, :method-params ([generators]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists (quote ([generators])), :doc "Create a generator that randomly chooses a value from the list of\n  provided generators. Shrinks toward choosing an earlier generator,\n  as well as shrinking the value generated by the chosen generator.\n\n  Examples:\n\n      (one-of [gen/int gen/boolean (gen/vector gen/int)])\n\n  "}, char-keyword-first {:name clojure.test.check.generators/char-keyword-first, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 530, :column 1, :end-line 530, :end-column 41, :private true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 530, :column 23, :end-line 530, :end-column 41, :private true}, :doc "Generate characters that can be the first char of a keyword."}, any-printable {:name clojure.test.check.generators/any-printable, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 687, :column 1, :end-line 687, :end-column 19, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 687, :column 6, :end-line 687, :end-column 19}, :doc "Like any, but avoids characters that the shell will interpret as actions,\n  like 7 and 14 (bell and alternate character set command)"}, char-keyword-rest {:name clojure.test.check.generators/char-keyword-rest, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 525, :column 1, :end-line 525, :end-column 40, :private true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 525, :column 23, :end-line 525, :end-column 40, :private true}, :doc "Generate characters that can be the char following first of a keyword."}, namespace {:name clojure.test.check.generators/namespace, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 571, :column 1, :end-line 571, :end-column 32, :private true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 571, :column 23, :end-line 571, :end-column 32, :private true}, :doc "Generate a namespace (or nil for no namespace)."}, boolean {:name clojure.test.check.generators/boolean, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 340, :column 1, :end-line 340, :end-column 13, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 340, :column 6, :end-line 340, :end-column 13}, :doc "Generates one of `true` or `false`. Shrinks to `false`."}, string-alphanumeric {:name clojure.test.check.generators/string-alphanumeric, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 543, :column 1, :end-line 543, :end-column 25, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 543, :column 6, :end-line 543, :end-column 25}, :doc "Generate alphanumeric strings."}, map {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 468, :column 7, :end-line 468, :end-column 10, :arglists (quote ([key-gen val-gen])), :doc "Create a generator that generates maps, with keys chosen from\n  `key-gen` and values chosen from `val-gen`."}, :name clojure.test.check.generators/map, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 10, :method-params ([key-gen val-gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 468, :end-line 468, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key-gen val-gen])), :doc "Create a generator that generates maps, with keys chosen from\n  `key-gen` and values chosen from `val-gen`."}, keyword-segment-rest {:name clojure.test.check.generators/keyword-segment-rest, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 577, :column 1, :end-line 577, :end-column 43, :private true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 577, :column 23, :end-line 577, :end-column 43, :private true}, :doc "Generate segments of a keyword (between \\:)"}, simple-type {:name clojure.test.check.generators/simple-type, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 635, :column 1, :end-line 635, :end-column 17, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 635, :column 6, :end-line 635, :end-column 17}}, char {:name clojure.test.check.generators/char, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 493, :column 1, :end-line 493, :end-column 10, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 493, :column 6, :end-line 493, :end-column 10}, :doc "Generates character from 0-255."}, pos-int {:name clojure.test.check.generators/pos-int, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 373, :column 1, :end-line 373, :end-column 13, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 373, :column 6, :end-line 373, :end-column 13}, :doc "Generate positive integers bounded by the generator's `size` parameter."}, bind {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 107, :column 7, :end-line 107, :end-column 11, :arglists (quote ([generator k])), :doc "Create a new generator that passes the result of `gen` into function\n  `k`. `k` should return a new generator. This allows you to create new\n  generators that depend on the value of other generators. For example,\n  to create a generator which first generates a vector of integers, and\n  then chooses a random element from that vector:\n\n      (gen/bind (gen/such-that not-empty (gen/vector gen/int))\n                ;; this function takes a realized vector,\n                ;; and then returns a new generator which\n                ;; chooses a random element from it\n                gen/elements)\n\n  "}, :name clojure.test.check.generators/bind, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 11, :method-params ([generator k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([generator k])), :doc "Create a new generator that passes the result of `gen` into function\n  `k`. `k` should return a new generator. This allows you to create new\n  generators that depend on the value of other generators. For example,\n  to create a generator which first generates a vector of integers, and\n  then chooses a random element from that vector:\n\n      (gen/bind (gen/such-that not-empty (gen/vector gen/int))\n                ;; this function takes a realized vector,\n                ;; and then returns a new generator which\n                ;; chooses a random element from it\n                gen/elements)\n\n  "}, symbol-ns {:name clojure.test.check.generators/symbol-ns, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 618, :column 1, :end-line 620, :end-column 12, :added "0.5.9", :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 620, :column 3, :end-line 620, :end-column 12, :added "0.5.9"}, :doc "Generate symbols with optional namespaces."}, any {:name clojure.test.check.generators/any, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 683, :column 1, :end-line 683, :end-column 9, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 683, :column 6, :end-line 683, :end-column 9}, :doc "A recursive generator that will generate many different, often nested, values"}, shuffle {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 444, :column 3, :end-line 444, :end-column 10, :added "0.6.0", :arglists (quote ([coll])), :doc "Create a generator that generates random permutations of `coll`. Shrinks\n  toward the original collection: `coll`. `coll` will be turned into a vector,\n  if it's not already."}, :added "0.6.0", :name clojure.test.check.generators/shuffle, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 10, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 442, :end-line 444, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Create a generator that generates random permutations of `coll`. Shrinks\n  toward the original collection: `coll`. `coll` will be turned into a vector,\n  if it's not already."}, container-type {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 641, :column 7, :end-line 641, :end-column 21, :arglists (quote ([inner-type]))}, :name clojure.test.check.generators/container-type, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 21, :method-params ([inner-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 641, :end-line 641, :max-fixed-arity 1, :fn-var true, :arglists (quote ([inner-type]))}, char-symbol-rest {:name clojure.test.check.generators/char-symbol-rest, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 606, :column 1, :end-line 606, :end-column 39, :private true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 606, :column 23, :end-line 606, :end-column 39, :private true}}, s-pos-int {:name clojure.test.check.generators/s-pos-int, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 381, :column 1, :end-line 381, :end-column 15, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 381, :column 6, :end-line 381, :end-column 15}, :doc "Generate strictly positive integers bounded by the generator's `size`\n   parameter."}, gen-seq->seq-gen {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 75, :column 8, :end-line 75, :end-column 24, :private true, :arglists (quote ([gens])), :doc "Takes a sequence of generators and returns a generator of sequences (er, vectors)."}, :private true, :name clojure.test.check.generators/gen-seq->seq-gen, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 24, :method-params ([gens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gens])), :doc "Takes a sequence of generators and returns a generator of sequences (er, vectors)."}, char-alpha {:name clojure.test.check.generators/char-alpha, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 515, :column 1, :end-line 515, :end-column 16, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 515, :column 6, :end-line 515, :end-column 16}, :doc "Generate alpha characters."}, generator? {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 28, :column 7, :end-line 28, :end-column 17, :arglists (quote ([x])), :doc "Test if `x` is a generator. Generators should be treated as opaque values."}, :name clojure.test.check.generators/generator?, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Test if `x` is a generator. Generators should be treated as opaque values."}, char-symbol-special {:name clojure.test.check.generators/char-symbol-special, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 521, :column 1, :end-line 521, :end-column 42, :private true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 521, :column 23, :end-line 521, :end-column 42, :private true}, :doc "Generate non-alphanumeric characters that can be in a symbol."}, sample-seq {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 133, :column 7, :end-line 133, :end-column 17, :arglists (quote ([generator] [generator max-size])), :doc "Return a sequence of realized values from `generator`.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator max-size]), :arglists ([generator] [generator max-size]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/sample-seq, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator max-size]), :arglists ([generator] [generator max-size]), :arglists-meta (nil nil)}, :method-params ([generator] [generator max-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists ([generator] [generator max-size]), :doc "Return a sequence of realized values from `generator`."}, int {:name clojure.test.check.generators/int, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 363, :column 1, :end-line 363, :end-column 9, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 363, :column 6, :end-line 363, :end-column 9}, :doc "Generates a positive or negative integer bounded by the generator's\n  `size` parameter.\n  (Really returns a long)"}, gen-pure {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 42, :column 7, :end-line 42, :end-column 15, :arglists (quote ([value])), :no-doc true}, :name clojure.test.check.generators/gen-pure, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 15, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, recursive-gen {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 659, :column 3, :end-line 659, :end-column 16, :added "0.5.9", :arglists (quote ([container-gen-fn scalar-gen])), :doc "This is a helper for writing recursive (tree-shaped) generators. The first\n  argument should be a function that takes a generator as an argument, and\n  produces another generator that 'contains' that generator. The vector function\n  in this namespace is a simple example. The second argument is a scalar\n  generator, like boolean. For example, to produce a tree of booleans:\n\n    (gen/recursive-gen gen/vector gen/boolean)\n\n  Vectors or maps either recurring or containing booleans or integers:\n\n    (gen/recursive-gen (fn [inner] (gen/one-of [(gen/vector inner)\n                                                (gen/map inner inner)]))\n                       (gen/one-of [gen/boolean gen/int]))\n  "}, :added "0.5.9", :name clojure.test.check.generators/recursive-gen, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 16, :method-params ([container-gen-fn scalar-gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 657, :end-line 659, :max-fixed-arity 2, :fn-var true, :arglists (quote ([container-gen-fn scalar-gen])), :doc "This is a helper for writing recursive (tree-shaped) generators. The first\n  argument should be a function that takes a generator as an argument, and\n  produces another generator that 'contains' that generator. The vector function\n  in this namespace is a simple example. The second argument is a scalar\n  generator, like boolean. For example, to produce a tree of booleans:\n\n    (gen/recursive-gen gen/vector gen/boolean)\n\n  Vectors or maps either recurring or containing booleans or integers:\n\n    (gen/recursive-gen (fn [inner] (gen/one-of [(gen/vector inner)\n                                                (gen/map inner inner)]))\n                       (gen/one-of [gen/boolean gen/int]))\n  "}, char-alpha-numeric {:name clojure.test.check.generators/char-alpha-numeric, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 508, :column 1, :end-line 509, :end-column 21, :deprecated "0.6.0", :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 509, :column 3, :end-line 509, :end-column 21, :deprecated "0.6.0"}, :doc "Deprecated - use char-alphanumeric instead.\n\n  Generate alphanumeric characters."}, return {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 91, :column 7, :end-line 91, :end-column 13, :arglists (quote ([value])), :doc "Create a generator that always returns `value`,\n  and never shrinks. You can think of this as\n  the `constantly` of generators."}, :name clojure.test.check.generators/return, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 13, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "Create a generator that always returns `value`,\n  and never shrinks. You can think of this as\n  the `constantly` of generators."}, gen-bind {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 56, :column 7, :end-line 56, :end-column 15, :arglists (quote ([{h :gen} k])), :no-doc true}, :name clojure.test.check.generators/gen-bind, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 15, :method-params ([p__28909 k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{h :gen} k]))}, scale {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 206, :column 7, :end-line 206, :end-column 12, :arglists (quote ([f generator])), :doc "Create a new generator that modifies the size parameter by the given function. Intended to\n   support generators with sizes that need to grow at different rates compared to the normal\n   linear scaling."}, :name clojure.test.check.generators/scale, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 12, :method-params ([f generator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f generator])), :doc "Create a new generator that modifies the size parameter by the given function. Intended to\n   support generators with sizes that need to grow at different rates compared to the normal\n   linear scaling."}, +-or---digit? {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 554, :column 8, :end-line 554, :end-column 21, :private true, :arglists (quote ([c d])), :doc "Returns true if c is \\+ or \\- and d is non-nil and a digit.\n\n  Symbols that start with +3 or -2 are not readable because they look\n  like numbers."}, :private true, :name clojure.test.check.generators/+-or---digit?, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 21, :method-params ([c d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 554, :end-line 554, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c d])), :doc "Returns true if c is \\+ or \\- and d is non-nil and a digit.\n\n  Symbols that start with +3 or -2 are not readable because they look\n  like numbers."}, symbol {:name clojure.test.check.generators/symbol, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 611, :column 1, :end-line 611, :end-column 12, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 611, :column 6, :end-line 611, :end-column 12}, :doc "Generate symbols without namespaces."}, such-that-helper {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 277, :column 8, :end-line 277, :end-column 24, :private true, :arglists (quote ([max-tries pred gen tries-left rng size]))}, :private true, :name clojure.test.check.generators/such-that-helper, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 24, :method-params ([max-tries pred gen tries-left rng size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 6, :fn-var true, :arglists (quote ([max-tries pred gen tries-left rng size]))}, pick {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 240, :column 8, :end-line 240, :end-column 12, :private true, :arglists (quote ([[h & tail] n]))}, :private true, :name clojure.test.check.generators/pick, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 12, :method-params ([p__28958 n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[h & tail] n]))}, char-alphanumeric {:name clojure.test.check.generators/char-alphanumeric, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 501, :column 1, :end-line 501, :end-column 23, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 501, :column 6, :end-line 501, :end-column 23}, :doc "Generate alphanumeric characters."}, make-size-range-seq {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 128, :column 7, :end-line 128, :end-column 26, :arglists (quote ([max-size])), :no-doc true}, :name clojure.test.check.generators/make-size-range-seq, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 26, :method-params ([max-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([max-size]))}, choose {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 213, :column 7, :end-line 213, :end-column 13, :arglists (quote ([lower upper])), :doc "Create a generator that returns numbers in the range\n  `min-range` to `max-range`, inclusive."}, :name clojure.test.check.generators/choose, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 13, :method-params ([lower upper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lower upper])), :doc "Create a generator that returns numbers in the range\n  `min-range` to `max-range`, inclusive."}, string-ascii {:name clojure.test.check.generators/string-ascii, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 539, :column 1, :end-line 539, :end-column 18, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 539, :column 6, :end-line 539, :end-column 18}, :doc "Generate ascii strings."}, make-gen {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 33, :column 8, :end-line 33, :end-column 16, :private true, :arglists (quote ([generator-fn]))}, :private true, :name clojure.test.check.generators/make-gen, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 16, :method-params ([generator-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([generator-fn]))}, Generator {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name clojure.test.check.generators/Generator, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 21, :type true, :column 12, :internal-ctor true, :line 26, :record true, :end-line 26, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, frequency {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 247, :column 7, :end-line 247, :end-column 16, :arglists (quote ([pairs])), :doc "Create a generator that chooses a generator from `pairs` based on the\n  provided likelihoods. The likelihood of a given generator being chosen is\n  its likelihood divided by the sum of all likelihoods\n\n  Examples:\n\n      (gen/frequency [[5 gen/int] [3 (gen/vector gen/int)] [2 gen/boolean]])\n  "}, :name clojure.test.check.generators/frequency, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 16, :method-params ([pairs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pairs])), :doc "Create a generator that chooses a generator from `pairs` based on the\n  provided likelihoods. The likelihood of a given generator being chosen is\n  its likelihood divided by the sum of all likelihoods\n\n  Examples:\n\n      (gen/frequency [[5 gen/int] [3 (gen/vector gen/int)] [2 gen/boolean]])\n  "}, generate {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 153, :column 7, :end-line 153, :end-column 15, :arglists (quote ([generator] [generator size])), :doc "Returns a single sample value from the generator, using a default\n  size of 30.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator size]), :arglists ([generator] [generator size]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/generate, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator size]), :arglists ([generator] [generator size]), :arglists-meta (nil nil)}, :method-params ([generator] [generator size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 2, :fn-var true, :arglists ([generator] [generator size]), :doc "Returns a single sample value from the generator, using a default\n  size of 30."}, sized {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 184, :column 7, :end-line 184, :end-column 12, :arglists (quote ([sized-gen])), :doc "Create a generator that depends on the size parameter.\n  `sized-gen` is a function that takes an integer and returns\n  a generator."}, :name clojure.test.check.generators/sized, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 12, :method-params ([sized-gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sized-gen])), :doc "Create a generator that depends on the size parameter.\n  `sized-gen` is a function that takes an integer and returns\n  a generator."}, s-neg-int {:name clojure.test.check.generators/s-neg-int, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 386, :column 1, :end-line 386, :end-column 15, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 386, :column 6, :end-line 386, :end-column 15}, :doc "Generate strictly negative integers bounded by the generator's `size`\n   parameter."}, nat {:name clojure.test.check.generators/nat, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 369, :column 1, :end-line 369, :end-column 9, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 369, :column 6, :end-line 369, :end-column 9}, :doc "Generates natural numbers, starting at zero. Shrinks to zero."}, namespace-segment {:name clojure.test.check.generators/namespace-segment, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 565, :column 1, :end-line 565, :end-column 40, :private true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 565, :column 23, :end-line 565, :end-column 40, :private true}, :doc "Generate the segment of a namespace."}, tuple {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 344, :column 7, :end-line 344, :end-column 12, :arglists (quote ([& generators])), :doc "Create a generator that returns a vector, whose elements are chosen\n  from the generators in the same position. The individual elements shrink\n  according to their generator, but the value will never shrink in count.\n\n  Examples:\n\n      (def t (tuple gen/int gen/boolean))\n      (sample t)\n      ;; => ([1 true] [2 true] [2 false] [1 false] [0 true] [-2 false] [-6 false]\n      ;; =>  [3 true] [-4 false] [9 true]))\n  ", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(generators)], :arglists ([& generators]), :arglists-meta (nil)}}, :name clojure.test.check.generators/tuple, :variadic true, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(generators)], :arglists ([& generators]), :arglists-meta (nil)}, :method-params [(generators)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 0, :fn-var true, :arglists ([& generators]), :doc "Create a generator that returns a vector, whose elements are chosen\n  from the generators in the same position. The individual elements shrink\n  according to their generator, but the value will never shrink in count.\n\n  Examples:\n\n      (def t (tuple gen/int gen/boolean))\n      (sample t)\n      ;; => ([1 true] [2 true] [2 false] [1 false] [0 true] [-2 false] [-6 false]\n      ;; =>  [3 true] [-4 false] [9 true]))\n  "}, lazy-random-states {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 66, :column 7, :end-line 66, :end-column 25, :arglists (quote ([rr])), :doc "Given a random number generator, returns an infinite lazy sequence\n  of random number generators."}, :name clojure.test.check.generators/lazy-random-states, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 25, :method-params ([rr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rr])), :doc "Given a random number generator, returns an infinite lazy sequence\n  of random number generators."}, map->Generator {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 26, :column 12, :end-line 26, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__28893]))}, :name clojure.test.check.generators/map->Generator, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 21, :method-params ([G__28893]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28893]))}, shrink-2 {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 333, :column 7, :end-line 333, :end-column 15, :arglists (quote ([gen])), :doc "Create a new generator like `gen`, but will consider nodes for shrinking\n  even if their parent passes the test (up to one additional level)."}, :name clojure.test.check.generators/shrink-2, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 15, :method-params ([gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 333, :end-line 333, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen])), :doc "Create a new generator like `gen`, but will consider nodes for shrinking\n  even if their parent passes the test (up to one additional level)."}, string-alpha-numeric {:name clojure.test.check.generators/string-alpha-numeric, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 547, :column 1, :end-line 548, :end-column 23, :deprecated "0.6.0", :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 548, :column 3, :end-line 548, :end-column 23, :deprecated "0.6.0"}, :doc "Deprecated - use string-alphanumeric instead.\n\n  Generate alphanumeric strings."}, resize {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 197, :column 7, :end-line 197, :end-column 13, :arglists (quote ([n generator])), :doc "Create a new generator with `size` always bound to `n`."}, :name clojure.test.check.generators/resize, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 13, :method-params ([n generator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n generator])), :doc "Create a new generator with `size` always bound to `n`."}, neg-int {:name clojure.test.check.generators/neg-int, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 377, :column 1, :end-line 377, :end-column 13, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 377, :column 6, :end-line 377, :end-column 13}, :doc "Generate negative integers bounded by the generator's `size` parameter."}, string {:name clojure.test.check.generators/string, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 535, :column 1, :end-line 535, :end-column 12, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 535, :column 6, :end-line 535, :end-column 12}, :doc "Generate strings. May generate unprintable characters."}, vector {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 391, :column 7, :end-line 391, :end-column 13, :arglists (quote ([generator] [generator num-elements] [generator min-elements max-elements])), :doc "Create a generator whose elements are chosen from `gen`. The count of the\n  vector will be bounded by the `size` generator parameter.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([generator] [generator num-elements] [generator min-elements max-elements]), :arglists ([generator] [generator num-elements] [generator min-elements max-elements]), :arglists-meta (nil nil nil)}}, :name clojure.test.check.generators/vector, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([generator] [generator num-elements] [generator min-elements max-elements]), :arglists ([generator] [generator num-elements] [generator min-elements max-elements]), :arglists-meta (nil nil nil)}, :method-params ([generator] [generator num-elements] [generator min-elements max-elements]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 391, :end-line 391, :max-fixed-arity 3, :fn-var true, :arglists ([generator] [generator num-elements] [generator min-elements max-elements]), :doc "Create a generator whose elements are chosen from `gen`. The count of the\n  vector will be bounded by the `size` generator parameter."}, keyword-ns {:name clojure.test.check.generators/keyword-ns, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 593, :column 1, :end-line 595, :end-column 13, :added "0.5.9", :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 595, :column 3, :end-line 595, :end-column 13, :added "0.5.9"}, :doc "Generate keywords with optional namespaces."}, not-empty {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 311, :column 7, :end-line 311, :end-column 16, :arglists (quote ([gen])), :doc "Modifies a generator so that it doesn't generate empty collections.\n\n  Examples:\n\n      ;; generate a vector of booleans, but never the empty vector\n      (gen/not-empty (gen/vector gen/boolean))\n  "}, :name clojure.test.check.generators/not-empty, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 16, :method-params ([gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 311, :end-line 311, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen])), :doc "Modifies a generator so that it doesn't generate empty collections.\n\n  Examples:\n\n      ;; generate a vector of booleans, but never the empty vector\n      (gen/not-empty (gen/vector gen/boolean))\n  "}, char-symbol-first {:name clojure.test.check.generators/char-symbol-first, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 601, :column 1, :end-line 601, :end-column 40, :private true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 601, :column 23, :end-line 601, :end-column 40, :private true}}, elements {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 264, :column 7, :end-line 264, :end-column 15, :arglists (quote ([coll])), :doc "Create a generator that randomly chooses an element from `coll`.\n\n  Examples:\n\n      (gen/elements [:foo :bar :baz])\n  "}, :name clojure.test.check.generators/elements, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 15, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Create a generator that randomly chooses an element from `coll`.\n\n  Examples:\n\n      (gen/elements [:foo :bar :baz])\n  "}, sample {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 143, :column 7, :end-line 143, :end-column 13, :arglists (quote ([generator] [generator num-samples])), :doc "Return a sequence of `num-samples` (default 10)\n  realized values from `generator`.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator num-samples]), :arglists ([generator] [generator num-samples]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/sample, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator num-samples]), :arglists ([generator] [generator num-samples]), :arglists-meta (nil nil)}, :method-params ([generator] [generator num-samples]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists ([generator] [generator num-samples]), :doc "Return a sequence of `num-samples` (default 10)\n  realized values from `generator`."}, list {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 425, :column 7, :end-line 425, :end-column 11, :arglists (quote ([generator])), :doc "Like `vector`, but generates lists."}, :name clojure.test.check.generators/list, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 11, :method-params ([generator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 425, :end-line 425, :max-fixed-arity 1, :fn-var true, :arglists (quote ([generator])), :doc "Like `vector`, but generates lists."}, keyword {:name clojure.test.check.generators/keyword, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 587, :column 1, :end-line 587, :end-column 13, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 587, :column 6, :end-line 587, :end-column 13}, :doc "Generate keywords without namespaces."}, bind-helper {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 98, :column 8, :end-line 98, :end-column 19, :private true, :arglists (quote ([k]))}, :private true, :name clojure.test.check.generators/bind-helper, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, hash-map {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 475, :column 7, :end-line 475, :end-column 15, :arglists (quote ([& kvs])), :doc "Like clojure.core/hash-map, except the values are generators.\n   Returns a generator that makes maps with the supplied keys and\n   values generated using the supplied generators.\n\n  Examples:\n\n    (gen/hash-map :a gen/boolean :b gen/nat)\n  ", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(kvs)], :arglists ([& kvs]), :arglists-meta (nil)}}, :name clojure.test.check.generators/hash-map, :variadic true, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(kvs)], :arglists ([& kvs]), :arglists-meta (nil)}, :method-params [(kvs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 475, :end-line 475, :max-fixed-arity 0, :fn-var true, :arglists ([& kvs]), :doc "Like clojure.core/hash-map, except the values are generators.\n   Returns a generator that makes maps with the supplied keys and\n   values generated using the supplied generators.\n\n  Examples:\n\n    (gen/hash-map :a gen/boolean :b gen/nat)\n  "}, call-gen {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 37, :column 7, :end-line 37, :end-column 15, :arglists (quote ([{generator-fn :gen} rnd size])), :no-doc true}, :name clojure.test.check.generators/call-gen, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 15, :method-params ([p__28899 rnd size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{generator-fn :gen} rnd size]))}, recursive-helper {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 647, :column 8, :end-line 647, :end-column 24, :private true, :arglists (quote ([container-gen-fn scalar-gen scalar-size children-size height]))}, :private true, :name clojure.test.check.generators/recursive-helper, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 24, :method-params ([container-gen-fn scalar-gen scalar-size children-size height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 647, :end-line 647, :max-fixed-arity 5, :fn-var true, :arglists (quote ([container-gen-fn scalar-gen scalar-size children-size height]))}, rand-range {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 177, :column 8, :end-line 177, :end-column 18, :private true, :arglists (quote ([rnd lower upper]))}, :private true, :name clojure.test.check.generators/rand-range, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 18, :method-params ([rnd lower upper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rnd lower upper]))}, ratio {:name clojure.test.check.generators/ratio, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 627, :column 1, :end-line 627, :end-column 11, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 627, :column 6, :end-line 627, :end-column 11}, :doc "Generates a `clojure.lang.Ratio`. Shrinks toward 0. Not all values generated\n  will be ratios, as many values returned by `/` are not ratios."}, such-that {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 288, :column 7, :end-line 288, :end-column 16, :arglists (quote ([pred gen] [pred gen max-tries])), :doc "Create a generator that generates values from `gen` that satisfy predicate\n  `pred`. Care is needed to ensure there is a high chance `gen` will satisfy\n  `pred`. By default, `such-that` will try 10 times to generate a value that\n  satisfies the predicate. If no value passes this predicate after this number\n  of iterations, a runtime exception will be throw. You can pass an optional\n  third argument to change the number of times tried. Note also that each\n  time such-that retries, it will increase the size parameter.\n\n  Examples:\n\n      ;; generate non-empty vectors of integers\n      ;; (note, gen/not-empty does exactly this)\n      (gen/such-that not-empty (gen/vector gen/int))\n  ", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred gen] [pred gen max-tries]), :arglists ([pred gen] [pred gen max-tries]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/such-that, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred gen] [pred gen max-tries]), :arglists ([pred gen] [pred gen max-tries]), :arglists-meta (nil nil)}, :method-params ([pred gen] [pred gen max-tries]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 3, :fn-var true, :arglists ([pred gen] [pred gen max-tries]), :doc "Create a generator that generates values from `gen` that satisfy predicate\n  `pred`. Care is needed to ensure there is a high chance `gen` will satisfy\n  `pred`. By default, `such-that` will try 10 times to generate a value that\n  satisfies the predicate. If no value passes this predicate after this number\n  of iterations, a runtime exception will be throw. You can pass an optional\n  third argument to change the number of times tried. Note also that each\n  time such-that retries, it will increase the size parameter.\n\n  Examples:\n\n      ;; generate non-empty vectors of integers\n      ;; (note, gen/not-empty does exactly this)\n      (gen/such-that not-empty (gen/vector gen/int))\n  "}, shrink-int {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 169, :column 8, :end-line 169, :end-column 18, :private true, :arglists (quote ([integer]))}, :private true, :name clojure.test.check.generators/shrink-int, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 18, :method-params ([integer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 1, :fn-var true, :arglists (quote ([integer]))}, swap {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 438, :column 8, :end-line 438, :end-column 12, :private true, :arglists (quote ([coll [i1 i2]]))}, :private true, :name clojure.test.check.generators/swap, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 12, :method-params ([coll p__29001]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 438, :end-line 438, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll [i1 i2]]))}, int-rose-tree {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 173, :column 8, :end-line 173, :end-column 21, :private true, :arglists (quote ([value]))}, :private true, :name clojure.test.check.generators/int-rose-tree, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 21, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, fmap {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 85, :column 7, :end-line 85, :end-column 11, :arglists (quote ([f gen]))}, :name clojure.test.check.generators/fmap, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 11, :method-params ([f gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f gen]))}, ->Generator {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 26, :column 12, :end-line 26, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([gen]))}, :name clojure.test.check.generators/->Generator, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 21, :method-params ([gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen]))}, no-shrink {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 323, :column 7, :end-line 323, :end-column 16, :arglists (quote ([gen])), :doc "Create a new generator that is just like `gen`, except does not shrink\n  at all. This can be useful when shrinking is taking a long time or is not\n  applicable to the domain."}, :name clojure.test.check.generators/no-shrink, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 16, :method-params ([gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen])), :doc "Create a new generator that is just like `gen`, except does not shrink\n  at all. This can be useful when shrinking is taking a long time or is not\n  applicable to the domain."}, char-ascii {:name clojure.test.check.generators/char-ascii, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 497, :column 1, :end-line 497, :end-column 16, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 497, :column 6, :end-line 497, :end-column 16}, :doc "Generate only ascii character."}, keyword-segment-first {:name clojure.test.check.generators/keyword-segment-first, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 582, :column 1, :end-line 582, :end-column 44, :private true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 582, :column 23, :end-line 582, :end-column 44, :private true}, :doc "Generate segments of a keyword that can be first (between \\:)"}, simple-type-printable {:name clojure.test.check.generators/simple-type-printable, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 638, :column 1, :end-line 638, :end-column 27, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 638, :column 6, :end-line 638, :end-column 27}}, halfs {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\generators.cljs", :line 165, :column 8, :end-line 165, :end-column 13, :private true, :arglists (quote ([n]))}, :private true, :name clojure.test.check.generators/halfs, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\generators.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{seq every? x generators vs :gen scalar-gen <= upper kvs fn generator? gen even? coll / g pairs count lower generator and number?}, :order [:gen gen generator? generator <= lower upper every? generators fn x g and number? pairs seq coll even? count kvs vs / scalar-gen]}, :doc nil}