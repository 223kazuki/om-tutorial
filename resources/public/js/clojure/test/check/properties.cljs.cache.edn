;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name clojure.test.check.properties, :imports nil, :requires {gen clojure.test.check.generators, clojure.test.check.generators clojure.test.check.generators}, :uses nil, :defs {apply-gen {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\properties.cljs", :line 14, :column 8, :end-line 14, :end-column 17, :private true, :arglists (quote ([function]))}, :private true, :name clojure.test.check.properties/apply-gen, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\properties.cljs", :end-column 17, :method-params ([function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([function]))}, for-all* {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\properties.cljs", :line 23, :column 7, :end-line 23, :end-column 15, :arglists (quote ([args function])), :doc "Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "}, :name clojure.test.check.properties/for-all*, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\properties.cljs", :end-column 15, :method-params ([args function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([args function])), :doc "Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "}}, :require-macros {clojure.test.check.properties clojure.test.check.properties}, :cljs.analyzer/constants {:seen #{:args :function :result}, :order [:result :function :args]}, :doc nil}