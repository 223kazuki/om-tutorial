;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{seq remove filter}, :name clojure.test.check.rose-tree, :imports nil, :requires {core cljs.core, cljs.core cljs.core}, :uses nil, :defs {seq {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 136, :column 7, :end-line 136, :end-column 10, :arglists (quote ([rose])), :doc "Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n  This assumes that two nodes with the same value have the same children.\n  While it's not common, it's possible to create trees that don't\n  fit that description. This function is significantly faster than\n  brute-force enumerating all of the nodes in a tree, as there will\n  be many duplicates."}, :name clojure.test.check.rose-tree/seq, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 10, :method-params ([rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rose])), :doc "Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n  This assumes that two nodes with the same value have the same children.\n  While it's not common, it's possible to create trees that don't\n  fit that description. This function is significantly faster than\n  brute-force enumerating all of the nodes in a tree, as there will\n  be many duplicates."}, pure {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 55, :column 7, :end-line 55, :end-column 11, :arglists (quote ([x])), :doc "Puts a value `x` into a Rose tree, with no children.", :no-doc true}, :name clojure.test.check.rose-tree/pure, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Puts a value `x` into a Rose tree, with no children."}, ->RoseTree {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 15, :column 10, :end-line 15, :end-column 18, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([root children]))}, :protocols #{}, :name clojure.test.check.rose-tree/->RoseTree, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 18, :method-params ([root children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([root children])), :skip-protocol-flag nil}, make-stack {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 130, :column 8, :end-line 130, :end-column 18, :private true, :arglists (quote ([children stack]))}, :private true, :name clojure.test.check.rose-tree/make-stack, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 18, :method-params ([children stack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([children stack]))}, join {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 43, :column 7, :end-line 43, :end-column 11, :arglists (quote ([rose])), :doc "Turn a tree of trees into a single tree. Does this by concatenating\n  children of the inner and outer trees.", :no-doc true}, :name clojure.test.check.rose-tree/join, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 11, :method-params ([rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rose])), :doc "Turn a tree of trees into a single tree. Does this by concatenating\n  children of the inner and outer trees."}, bind {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 67, :column 7, :end-line 67, :end-column 11, :arglists (quote ([m k])), :doc "Takes a Rose tree (m) and a function (k) from\n  values to Rose tree and returns a new Rose tree.\n  This is the monadic bind (>>=) for Rose trees.", :no-doc true}, :name clojure.test.check.rose-tree/bind, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 11, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k])), :doc "Takes a Rose tree (m) and a function (k) from\n  values to Rose tree and returns a new Rose tree.\n  This is the monadic bind (>>=) for Rose trees."}, children {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 23, :column 7, :end-line 23, :end-column 15, :arglists (quote ([rose])), :doc "Returns the children of the root of the Rose tree.", :no-doc true}, :name clojure.test.check.rose-tree/children, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 15, :method-params ([rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rose])), :doc "Returns the children of the root of the Rose tree."}, exclude-nth {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 33, :column 8, :end-line 33, :end-column 19, :private true, :arglists (quote ([n coll])), :doc "Exclude the nth value in a collection."}, :private true, :name clojure.test.check.rose-tree/exclude-nth, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 19, :method-params ([n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n coll])), :doc "Exclude the nth value in a collection."}, remove {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 103, :column 7, :end-line 103, :end-column 13, :arglists (quote ([roses])), :no-doc true}, :name clojure.test.check.rose-tree/remove, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 13, :method-params ([roses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([roses]))}, permutations {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 85, :column 7, :end-line 85, :end-column 19, :arglists (quote ([roses])), :doc "Create a seq of vectors, where each rose in turn, has been replaced\n  by its children.", :no-doc true}, :name clojure.test.check.rose-tree/permutations, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 19, :method-params ([roses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([roses])), :doc "Create a seq of vectors, where each rose in turn, has been replaced\n  by its children."}, RoseTree {:num-fields 2, :protocols #{}, :name clojure.test.check.rose-tree/RoseTree, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 18, :type true, :column 10, :line 15, :record false, :end-line 15, :skip-protocol-flag nil}, shrink {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 110, :column 7, :end-line 110, :end-column 13, :arglists (quote ([f roses])), :no-doc true}, :name clojure.test.check.rose-tree/shrink, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 13, :method-params ([f roses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f roses]))}, make-rose {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 29, :column 7, :end-line 29, :end-column 16, :arglists (quote ([root children]))}, :name clojure.test.check.rose-tree/make-rose, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 16, :method-params ([root children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([root children]))}, filter {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 75, :column 7, :end-line 75, :end-column 13, :arglists (quote ([pred rose])), :doc "Returns a new Rose tree whose values pass `pred`. Values who\n  do not pass `pred` have their children cut out as well.\n  Takes a list of roses, not a rose", :no-doc true}, :name clojure.test.check.rose-tree/filter, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 13, :method-params ([pred rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred rose])), :doc "Returns a new Rose tree whose values pass `pred`. Values who\n  do not pass `pred` have their children cut out as well.\n  Takes a list of roses, not a rose"}, root {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 17, :column 7, :end-line 17, :end-column 11, :arglists (quote ([rose])), :doc "Returns the root of a Rose tree.", :no-doc true}, :name clojure.test.check.rose-tree/root, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 11, :method-params ([rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rose])), :doc "Returns the root of a Rose tree."}, zip {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 94, :column 7, :end-line 94, :end-column 10, :arglists (quote ([f roses])), :doc "Apply `f` to the sequence of Rose trees `roses`.", :no-doc true}, :name clojure.test.check.rose-tree/zip, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 10, :method-params ([f roses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f roses])), :doc "Apply `f` to the sequence of Rose trees `roses`."}, fmap {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 61, :column 7, :end-line 61, :end-column 11, :arglists (quote ([f rose])), :doc "Applies functions `f` to all values in the tree.", :no-doc true}, :name clojure.test.check.rose-tree/fmap, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 11, :method-params ([f rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f rose])), :doc "Applies functions `f` to all values in the tree."}, collapse {:no-doc true, :protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :line 118, :column 7, :end-line 118, :end-column 15, :arglists (quote ([rose])), :doc "Return a new rose-tree whose depth-one children\n  are the children from depth one _and_ two of the input\n  tree.", :no-doc true}, :name clojure.test.check.rose-tree/collapse, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\rose_tree.cljs", :end-column 15, :method-params ([rose]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rose])), :doc "Return a new rose-tree whose depth-one children\n  are the children from depth one _and_ two of the input\n  tree."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{children root}, :order [root children]}, :doc "A lazy tree data structure used for shrinking."}