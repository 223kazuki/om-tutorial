;; Analyzed by ClojureScript 1.7.170
{:name clojure.test.check.random.doubles, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {longs clojure.test.check.random.longs, clojure.test.check.random.longs clojure.test.check.random.longs}, :imports nil, :defs {double-unit {:name clojure.test.check.random.doubles/double-unit, :file "resources\\public\\js\\clojure\\test\\check\\random\\doubles.cljs", :line 14, :column 1, :end-line 14, :end-column 27, :private true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\random\\doubles.cljs", :line 14, :column 16, :end-line 14, :end-column 27, :private true}}, big-double-unit {:name clojure.test.check.random.doubles/big-double-unit, :file "resources\\public\\js\\clojure\\test\\check\\random\\doubles.cljs", :line 20, :column 1, :end-line 20, :end-column 31, :private true, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\random\\doubles.cljs", :line 20, :column 16, :end-line 20, :end-column 31, :private true}}, rand-long->rand-double {:protocol-inline nil, :meta {:file "C:\\work\\om-tutorial\\resources\\public\\js\\clojure\\test\\check\\random\\doubles.cljs", :line 24, :column 7, :end-line 24, :end-column 29, :arglists (quote ([long])), :doc "Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive)."}, :name clojure.test.check.random.doubles/rand-long->rand-double, :variadic false, :file "resources\\public\\js\\clojure\\test\\check\\random\\doubles.cljs", :end-column 29, :method-params ([long]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([long])), :doc "Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive)."}}}